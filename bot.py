import os
import io
import requests
from PIL import Image
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

# 1) –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (TELEGRAM_TOKEN –∏ HF_INFER_TOKEN –∑–∞–¥–∞—é—Ç—Å—è –≤ Render ‚Üí Environment)
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
HF_INFER_TOKEN = os.environ["HF_INFER_TOKEN"]

# 2) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Hugging Face Inference API
MODEL_ID = "artificialguybr/LogoRedmond-LogoLoraForSDXL-V2"
API_URL  = f"https://api-inference.huggingface.co/models/{MODEL_ID}"
HEADERS  = {"Authorization": f"Bearer {HF_INFER_TOKEN}"}

# 3) –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NAME, STYLE, COLORS = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


async def ask_style(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    keyboard = [["–º–∏–Ω–∏–º–∞–ª–∏–∑–º", "—Ä–µ—Ç—Ä–æ", "—Ñ—É—Ç—É—Ä–∏–∑–º"], ["–¥—Ä—É–≥–æ–π"]]
    await update.message.reply_text(
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ª–æ–≥–æ—Ç–∏–ø–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return STYLE


async def ask_colors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["style"] = update.message.text
    await update.message.reply_text(
        "üåà –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∏–Ω–∏–π, –±–µ–ª—ã–π):",
        reply_markup=ReplyKeyboardRemove()
    )
    return COLORS


async def gen_logo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["colors"] = update.message.text

    name, style, colors = (
        context.user_data["name"],
        context.user_data["style"],
        context.user_data["colors"],
    )
    prompt = f"Logo for {name}, style: {style}, colors: {colors}"

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø‚Ä¶")
    try:
        resp = requests.post(
            API_URL,
            headers=HEADERS,
            json={"inputs": prompt},
            timeout=120
        )
        resp.raise_for_status()
        img = Image.open(io.BytesIO(resp.content))
        img.save("logo.png")
        with open("logo.png", "rb") as f:
