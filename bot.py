import os
import io
import requests
from PIL import Image
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

# 1) –¢–æ–∫–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN="7395107471:AAGjMeouJcXJ5VFaQb7C0Daxd1fXipOofMI"
HF_HUB_TOKEN="artificialguybr/LogoRedmond-LogoLoraForSDXL-V2"


# 1) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HF Inference API
MODEL_ID = "artificialguybr/LogoRedmond-LogoLoraForSDXL-V2"
API_URL  = f"https://api-inference.huggingface.co/models/{MODEL_ID}"
HEADERS  = {"Authorization": f"Bearer {HF_INFER_TOKEN}"}

# 2) –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NAME, STYLE, COLORS = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


async def ask_style(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    keyboard = [["–º–∏–Ω–∏–º–∞–ª–∏–∑–º", "—Ä–µ—Ç—Ä–æ", "—Ñ—É—Ç—É—Ä–∏–∑–º"], ["–¥—Ä—É–≥–æ–π"]]
    await update.message.reply_text(
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ª–æ–≥–æ—Ç–∏–ø–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return STYLE


async def ask_colors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["style"] = update.message.text
    await update.message.reply_text(
        "üåà –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∏–Ω–∏–π, –±–µ–ª—ã–π):",
        reply_markup=ReplyKeyboardRemove()
    )
    return COLORS


async def gen_logo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["colors"] = update.message.text

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
    name   = context.user_data["name"]
    style  = context.user_data["style"]
    colors = context.user_data["colors"]
    prompt = f"Logo for {name}, style: {style}, colors: {colors}"

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø‚Ä¶")

    try:
        resp = requests.post(
            API_URL,
            headers=HEADERS,
            json={"inputs": prompt},
            timeout=120
        )
        resp.raise_for_status()

        image = Image.open(io.BytesIO(resp.content))
        image.save("logo.png")

        with open("logo.png", "rb") as img_file:
            await update.message.reply_photo(photo=img_file)

    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def default_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

def main() -> None:
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # 3) –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è: NAME ‚Üí STYLE ‚Üí COLORS
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME:   [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_style)],
            STYLE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_colors)],
            COLORS: [MessageHandler(filters.TEXT & ~filters.COMMAND, gen_logo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    # 4) –í—Å—ë, —á—Ç–æ –≤–Ω–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ ‚Äî –ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å —Å /start (group=1, –ø–æ—Å–ª–µ conv_handler)
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, default_response),
        group=1
    )

    app.run_polling()


if __name__ == "__main__":
    main()
